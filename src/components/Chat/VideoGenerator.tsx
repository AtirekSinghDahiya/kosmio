import React, { useState, useEffect } from 'react';
import { Video, Download, Wand2, X, Loader, Sparkles, Play, Clock, Maximize, AlertCircle } from 'lucide-react';
import { generateAndWaitForAimlapiVideo, isAimlapiAvailable } from '../../lib/aimlapiVideoService';
import { generateHeyGenVideo, pollHeyGenStatus, isHeyGenAvailable } from '../../lib/heygenService';
import { createAndPollFalSoraVideo, isFalSoraAvailable } from '../../lib/falSoraService';
import { useToast } from '../../contexts/ToastContext';
import { useAuth } from '../../hooks/useAuth';
import { saveVideoToProject } from '../../lib/contentSaveService';
import { DynamicTokenEstimator } from '../../lib/dynamicTokenEstimator';

interface VideoGeneratorProps {
  onClose: () => void;
  initialPrompt?: string;
}

type VideoProvider = 'veo3' | 'heygen' | 'sora';

export const VideoGenerator: React.FC<VideoGeneratorProps> = ({ onClose, initialPrompt = '' }) => {
  const { showToast } = useToast();
  const { user } = useAuth();
  const [prompt, setPrompt] = useState(initialPrompt);
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedVideoUrl, setGeneratedVideoUrl] = useState<string | null>(null);
  const [progress, setProgress] = useState(0);
  const [aspectRatio, setAspectRatio] = useState<'16:9' | '9:16' | '1:1'>('16:9');
  const [duration, setDuration] = useState<4 | 8>(4);
  const [hasAutoGenerated, setHasAutoGenerated] = useState(false);
  const [provider, setProvider] = useState<VideoProvider>('sora');
  const [estimatedCost, setEstimatedCost] = useState<number>(0);

  const aimlapiAvailable = isAimlapiAvailable();
  const heygenAvailable = isHeyGenAvailable();
  const soraAvailable = isFalSoraAvailable();

  useEffect(() => {
    if (initialPrompt && !hasAutoGenerated) {
      setPrompt(initialPrompt);
      setHasAutoGenerated(true);
      setTimeout(() => {
        handleGenerate(initialPrompt);
      }, 100);
    }
  }, [initialPrompt, hasAutoGenerated]);

  useEffect(() => {
    if (prompt.trim()) {
      const tokens = DynamicTokenEstimator.estimateVideoCost(prompt, duration);
      setEstimatedCost(tokens);
    } else {
      setEstimatedCost(0);
    }
  }, [prompt, duration]);

  const handleGenerateWithHeyGen = async (promptToUse: string) => {
    showToast('info', 'Starting Generation', 'Creating your AI avatar video with HeyGen...');
    setProgress(10);

    const aspectRatioMap: Record<string, '16:9' | '9:16' | '1:1'> = {
      '16:9': '16:9',
      '9:16': '9:16',
      '1:1': '1:1',
    };

    const result = await generateHeyGenVideo({
      script: promptToUse,
      aspectRatio: aspectRatioMap[aspectRatio] || '16:9',
    });

    setProgress(30);

    let attempts = 0;
    const maxAttempts = 120;

    while (attempts < maxAttempts) {
      await new Promise(resolve => setTimeout(resolve, 5000));

      const status = await pollHeyGenStatus(result.id);
      const progressPercent = 30 + (attempts / maxAttempts) * 60;
      setProgress(Math.min(progressPercent, 90));

      if (status.status === 'completed' && status.video_url) {
        setGeneratedVideoUrl(status.video_url);
        setProgress(100);
        showToast('success', 'Video Ready!', 'Your AI avatar video has been generated successfully');

        if (user) {
          try {
            await saveVideoToProject(user.uid, promptToUse, status.video_url, {
              model: 'heygen',
              duration: duration,
              provider: 'heygen'
            });
          } catch (saveError) {
            console.error('Failed to save video to project:', saveError);
          }
        }
        return;
      }

      if (status.status === 'failed') {
        throw new Error(status.error || 'Video generation failed');
      }

      attempts++;
    }

    throw new Error('Video generation timed out');
  };

  const handleGenerateWithVeo3 = async (promptToUse: string) => {
    showToast('info', 'Starting Generation', 'Creating your AI video with Veo-3...');

    const apiKey = import.meta.env.VITE_AIMLAPI_KEY;
    if (!apiKey) {
      throw new Error('AIMLAPI key is not configured');
    }

    const videoUrl = await generateAndWaitForAimlapiVideo(
      {
        prompt: promptToUse,
        aspectRatio: aspectRatio,
        duration: duration,
      },
      apiKey,
      (status, percent) => {
        console.log(`Progress: ${status} - ${percent}%`);
        setProgress(percent);
      }
    );

    setGeneratedVideoUrl(videoUrl);
    setProgress(100);
    showToast('success', 'Video Ready!', 'Your AI video has been generated successfully');

    if (user) {
      try {
        await saveVideoToProject(user.uid, promptToUse, videoUrl, {
          model: 'veo-3',
          duration: duration,
          provider: 'aimlapi'
        });
      } catch (saveError) {
        console.error('Failed to save video to project:', saveError);
      }
    }
  };

  const handleGenerateWithSora = async (promptToUse: string) => {
    showToast('info', 'Starting Generation', 'Creating your video with Fal.ai Sora 2...');

    const aspectRatioMap: Record<string, '16:9' | '9:16'> = {
      '16:9': '16:9',
      '9:16': '9:16',
      '1:1': '16:9', // Default to 16:9 for square
    };

    const durationMap: Record<number, 4 | 8 | 12> = {
      4: 4,
      8: 8,
    };

    const videoUrl = await createAndPollFalSoraVideo(
      {
        prompt: promptToUse,
        resolution: '720p',
        aspect_ratio: aspectRatioMap[aspectRatio] || '16:9',
        duration: durationMap[duration] || 4,
      },
      (status, percent) => {
        console.log(`Progress: ${status} - ${percent}%`);
        setProgress(percent);
      }
    );

    setGeneratedVideoUrl(videoUrl);
    setProgress(100);
    showToast('success', 'Video Ready!', 'Your Fal.ai Sora 2 video has been generated successfully');

    if (user) {
      try {
        await saveVideoToProject(user.uid, promptToUse, videoUrl, {
          model: 'sora-2',
          duration: duration,
          provider: 'fal-ai'
        });
      } catch (saveError) {
        console.error('Failed to save video to project:', saveError);
      }
    }
  };

  const handleGenerate = async (customPrompt?: string) => {
    const promptToUse = customPrompt || prompt.trim();

    if (!promptToUse) {
      showToast('warning', 'Enter a prompt', 'Please describe the video you want to create');
      return;
    }

    if (provider === 'veo3' && !aimlapiAvailable) {
      showToast('error', 'API Key Missing', 'AIMLAPI key is not configured');
      return;
    }

    if (provider === 'heygen' && !heygenAvailable) {
      showToast('error', 'HeyGen Unavailable', 'HeyGen API is not configured');
      return;
    }

    if (isGenerating) {
      console.log('ðŸš« Generation already in progress, ignoring duplicate request');
      return;
    }

    console.log(`ðŸŽ¬ Starting video generation with ${provider.toUpperCase()}:`, promptToUse);
    setIsGenerating(true);
    setProgress(0);
    setGeneratedVideoUrl(null);

    try {
      if (provider === 'heygen') {
        await handleGenerateWithHeyGen(promptToUse);
      } else if (provider === 'sora') {
        await handleGenerateWithSora(promptToUse);
      } else {
        await handleGenerateWithVeo3(promptToUse);
      }
    } catch (error: any) {
      console.error('Video generation error:', error);
      let errorMessage = error?.message || 'Unable to generate video. Please try again.';

      if (errorMessage.includes('insufficient') || errorMessage.includes('credits')) {
        errorMessage = 'Insufficient API credits. Please check your AIMLAPI account.';
      }

      showToast('error', 'Generation Failed', errorMessage);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleDownload = () => {
    if (!generatedVideoUrl) return;

    const link = document.createElement('a');
    link.href = generatedVideoUrl;
    link.download = `kroniq-${provider}-video-${Date.now()}.mp4`;
    link.target = '_blank';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    showToast('success', 'Downloaded!', 'Video saved to your device');
  };

  return (
    <div className="fixed inset-0 bg-black/80 backdrop-blur-xl flex items-center justify-center z-[100] animate-fade-in">
      <div className="relative w-full max-w-7xl mx-auto px-4 py-6">
        <div className="relative bg-gradient-to-br from-slate-800 via-slate-700 to-slate-800 backdrop-blur-2xl rounded-3xl border-2 border-orange-500/30 shadow-2xl shadow-orange-500/20 overflow-hidden">

          <div className="absolute -inset-[2px] bg-gradient-to-r from-orange-500/20 via-red-500/20 to-orange-500/20 rounded-3xl blur-xl animate-pulse opacity-50" />

          <div className="relative bg-gradient-to-r from-orange-600/10 via-red-600/10 to-orange-600/10 backdrop-blur-sm p-6 border-b border-orange-500/20">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-4">
                <div className="relative p-3 rounded-2xl bg-gradient-to-br from-orange-500 to-red-600 shadow-lg shadow-orange-500/30">
                  <Video className="w-7 h-7 text-white" />
                  <div className="absolute inset-0 bg-gradient-to-br from-white/20 to-transparent rounded-2xl" />
                </div>
                <div>
                  <h2 className="text-2xl font-bold text-white flex items-center gap-2">
                    AI Video Studio
                    <Sparkles className="w-5 h-5 text-orange-400 animate-pulse" />
                  </h2>
                  <p className="text-sm text-orange-300/80 mt-0.5">
                    {provider === 'heygen' ? 'Powered by HeyGen AI Avatars' : provider === 'sora' ? 'Powered by Fal.ai Sora 2' : 'Powered by Google Veo-3 via AIMLAPI'}
                  </p>
                </div>
              </div>
              <button
                onClick={onClose}
                className="p-3 rounded-2xl hover:bg-white/10 active:bg-white/20 text-white/60 hover:text-white transition-all duration-200 hover:rotate-90"
              >
                <X className="w-6 h-6" />
              </button>
            </div>
          </div>

          <div className="relative p-8">
            <div className="grid lg:grid-cols-2 gap-8">

              <div className="space-y-6">

                <div className="space-y-3">
                  <label className="text-sm font-semibold text-white/90 flex items-center gap-2">
                    <Video className="w-4 h-4 text-orange-400" />
                    Video Provider
                  </label>
                  <div className="grid grid-cols-3 gap-3">
                    <button
                      onClick={() => setProvider('sora')}
                      disabled={isGenerating}
                      className={`px-4 py-3 rounded-xl font-medium transition-all disabled:opacity-50 disabled:cursor-not-allowed ${
                        provider === 'sora'
                          ? 'bg-orange-500/20 border-2 border-orange-400/60 text-orange-300'
                          : 'bg-slate-700/50 border-2 border-white/20 text-white/60 hover:border-orange-400/30'
                      }`}
                    >
                      <div className="text-sm font-bold">Sora 2</div>
                      <div className="text-xs opacity-75">OpenAI</div>
                    </button>
                    <button
                      onClick={() => setProvider('veo3')}
                      disabled={isGenerating || !aimlapiAvailable}
                      className={`px-4 py-3 rounded-xl font-medium transition-all disabled:opacity-50 disabled:cursor-not-allowed ${
                        provider === 'veo3'
                          ? 'bg-orange-500/20 border-2 border-orange-400/60 text-orange-300'
                          : 'bg-slate-700/50 border-2 border-white/20 text-white/60 hover:border-orange-400/30'
                      }`}
                    >
                      <div className="text-sm font-bold">Veo-3</div>
                      <div className="text-xs opacity-75">Google</div>
                    </button>
                    <button
                      onClick={() => setProvider('heygen')}
                      disabled={isGenerating || !heygenAvailable}
                      className={`px-4 py-3 rounded-xl font-medium transition-all disabled:opacity-50 disabled:cursor-not-allowed ${
                        provider === 'heygen'
                          ? 'bg-orange-500/20 border-2 border-orange-400/60 text-orange-300'
                          : 'bg-slate-700/50 border-2 border-white/20 text-white/60 hover:border-orange-400/30'
                      }`}
                    >
                      <div className="text-sm font-bold">HeyGen</div>
                      <div className="text-xs opacity-75">Avatars</div>
                    </button>
                  </div>
                </div>

                {!aimlapiAvailable && provider === 'veo3' && (
                  <div className="flex items-start gap-3 p-4 bg-amber-500/10 border border-amber-500/30 rounded-xl">
                    <AlertCircle className="w-5 h-5 text-amber-400 flex-shrink-0 mt-0.5" />
                    <div className="text-sm text-amber-200">
                      <p className="font-semibold mb-1">API Key Required</p>
                      <p className="text-amber-300/80">AIMLAPI key is not configured. Please add your API key to use Veo-3.</p>
                    </div>
                  </div>
                )}

                <div className="space-y-3">
                  <label className="text-sm font-semibold text-white/90 flex items-center gap-2">
                    <Sparkles className="w-4 h-4 text-orange-400" />
                    Video Prompt
                  </label>
                  <div className="relative">
                    <textarea
                      value={prompt}
                      onChange={(e) => setPrompt(e.target.value)}
                      placeholder={
                        provider === 'heygen'
                          ? "Enter your script... e.g., 'Welcome to our AI-powered video studio!'"
                          : "Describe your video... e.g., 'A dog playing in a park on a sunny day'"
                      }
                      className="w-full h-40 px-5 py-4 bg-slate-700/50 border-2 border-white/20 focus:border-orange-400/60 rounded-2xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-orange-500/20 resize-none transition-all text-base backdrop-blur-sm"
                      disabled={isGenerating}
                    />
                    <div className="absolute bottom-3 right-3 text-xs text-white/40">
                      {prompt.length} / 500
                    </div>
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <label className="text-sm font-semibold text-white/90 flex items-center gap-2">
                      <Maximize className="w-4 h-4 text-blue-400" />
                      Aspect Ratio
                    </label>
                    <div className="relative">
                      <select
                        value={aspectRatio}
                        onChange={(e) => setAspectRatio(e.target.value as any)}
                        disabled={isGenerating}
                        className="w-full px-4 py-3 bg-slate-700/50 border-2 border-white/20 focus:border-blue-400/60 rounded-xl text-white focus:outline-none focus:ring-2 focus:ring-blue-500/20 transition-all appearance-none cursor-pointer disabled:opacity-50 disabled:cursor-not-allowed"
                      >
                        <option value="16:9">16:9 Landscape</option>
                        <option value="9:16">9:16 Portrait</option>
                        <option value="1:1">1:1 Square</option>
                      </select>
                      <div className="absolute right-4 top-1/2 -translate-y-1/2 pointer-events-none">
                        <svg className="w-4 h-4 text-white/60" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                        </svg>
                      </div>
                    </div>
                  </div>

                  {provider === 'veo3' && (
                    <div className="space-y-2">
                      <label className="text-sm font-semibold text-white/90 flex items-center gap-2">
                        <Clock className="w-4 h-4 text-cyan-400" />
                        Duration
                      </label>
                      <div className="relative">
                        <select
                          value={duration}
                          onChange={(e) => setDuration(Number(e.target.value) as any)}
                          disabled={isGenerating}
                          className="w-full px-4 py-3 bg-slate-700/50 border-2 border-white/20 focus:border-cyan-400/60 rounded-xl text-white focus:outline-none focus:ring-2 focus:ring-cyan-500/20 transition-all appearance-none cursor-pointer disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                          <option value={4}>4 seconds</option>
                          <option value={8}>8 seconds</option>
                        </select>
                        <div className="absolute right-4 top-1/2 -translate-y-1/2 pointer-events-none">
                          <svg className="w-4 h-4 text-white/60" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                          </svg>
                        </div>
                      </div>
                    </div>
                  )}
                </div>

                <button
                  onClick={() => handleGenerate()}
                  disabled={isGenerating || !prompt.trim()}
                  className="w-full flex items-center justify-center gap-3 px-6 py-4 bg-gradient-to-r from-orange-500 via-red-500 to-orange-600 hover:from-orange-600 hover:via-red-600 hover:to-orange-700 disabled:from-gray-700 disabled:to-gray-800 text-white font-semibold rounded-2xl transition-all disabled:opacity-40 disabled:cursor-not-allowed shadow-lg shadow-orange-500/30 hover:shadow-xl hover:shadow-orange-500/50 active:scale-[0.98] text-lg relative overflow-hidden group"
                >
                  <div className="absolute inset-0 bg-gradient-to-r from-white/0 via-white/20 to-white/0 translate-x-[-100%] group-hover:translate-x-[100%] transition-transform duration-700" />
                  {isGenerating ? (
                    <>
                      <Loader className="w-6 h-6 animate-spin relative z-10" />
                      <span className="relative z-10">
                        Generating... {progress > 0 && `${Math.round(progress)}%`}
                      </span>
                    </>
                  ) : (
                    <>
                      <Wand2 className="w-6 h-6 relative z-10" />
                      <span className="relative z-10">Generate Video</span>
                    </>
                  )}
                </button>

                {isGenerating && progress > 0 && (
                  <div className="space-y-2 animate-fade-in">
                    <div className="flex justify-between text-sm font-medium">
                      <span className="text-orange-300">Processing your video...</span>
                      <span className="text-orange-400">{Math.round(progress)}%</span>
                    </div>
                    <div className="w-full h-3 bg-white/10 rounded-full overflow-hidden backdrop-blur-sm border border-white/10">
                      <div
                        className="h-full bg-gradient-to-r from-orange-500 via-red-500 to-orange-500 transition-all duration-500 relative overflow-hidden"
                        style={{ width: `${progress}%` }}
                      >
                        <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent animate-shimmer" />
                      </div>
                    </div>
                    <p className="text-xs text-white/50 text-center">
                      {provider === 'heygen' ? 'This usually takes 30-90 seconds' : 'This usually takes 2-5 minutes'}
                    </p>
                  </div>
                )}

              </div>

              <div className="space-y-4">
                <div className="relative aspect-video bg-gradient-to-br from-slate-800/50 to-slate-900/80 rounded-2xl border-2 border-white/10 overflow-hidden group">

                  {generatedVideoUrl ? (
                    <>
                      <video
                        src={generatedVideoUrl}
                        controls
                        autoPlay
                        loop
                        className="w-full h-full object-contain bg-black/50"
                      />
                      <button
                        onClick={handleDownload}
                        className="absolute top-4 right-4 p-3 bg-black/80 hover:bg-orange-500 backdrop-blur-md text-white rounded-xl transition-all opacity-0 group-hover:opacity-100 hover:scale-110 active:scale-95 shadow-lg"
                      >
                        <Download className="w-5 h-5" />
                      </button>
                    </>
                  ) : isGenerating ? (
                    <div className="absolute inset-0 flex items-center justify-center">
                      <div className="text-center space-y-6">
                        <div className="relative inline-block">
                          <div className="w-20 h-20 border-4 border-orange-500/20 border-t-orange-500 rounded-full animate-spin" />
                          <Video className="w-8 h-8 text-orange-400 absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2" />
                        </div>
                        <div className="space-y-2">
                          <p className="text-white/90 font-semibold text-lg">Creating Your Video</p>
                          <p className="text-white/50 text-sm max-w-xs mx-auto">
                            {provider === 'heygen'
                              ? 'The AI is generating your avatar video. This may take up to a minute...'
                              : 'The AI is generating your video. This may take a few minutes...'
                            }
                          </p>
                        </div>
                      </div>
                    </div>
                  ) : (
                    <div className="absolute inset-0 flex items-center justify-center p-8">
                      <div className="text-center space-y-6">
                        <div className="inline-flex p-6 rounded-3xl bg-gradient-to-br from-orange-500/20 to-red-500/20 border border-orange-500/30">
                          <Play className="w-16 h-16 text-orange-400" />
                        </div>
                        <div className="space-y-3">
                          <p className="text-white/90 font-semibold text-xl">Your Video Preview</p>
                          <p className="text-white/50 text-sm max-w-sm mx-auto leading-relaxed">
                            {provider === 'heygen'
                              ? 'Enter your script and click Generate. Your AI avatar video will appear here.'
                              : 'Describe what you want to see and click Generate. Your AI-powered video will appear here.'
                            }
                          </p>
                        </div>
                      </div>
                    </div>
                  )}
                </div>

                <div className="grid grid-cols-2 gap-3">
                  <div className="p-4 bg-white/5 border border-white/10 rounded-xl backdrop-blur-sm">
                    <div className="flex items-center gap-2 text-orange-400 mb-1">
                      <Video className="w-4 h-4" />
                      <span className="text-xs font-semibold">Provider</span>
                    </div>
                    <p className="text-white font-semibold capitalize">{provider === 'veo3' ? 'Veo-3' : 'HeyGen'}</p>
                  </div>
                  <div className="p-4 bg-white/5 border border-white/10 rounded-xl backdrop-blur-sm">
                    <div className="flex items-center gap-2 text-blue-400 mb-1">
                      <Maximize className="w-4 h-4" />
                      <span className="text-xs font-semibold">Format</span>
                    </div>
                    <p className="text-white font-semibold">{aspectRatio}</p>
                  </div>
                </div>
              </div>

            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

import React, { useState, useEffect } from 'react';
import { Video, Download, X, Loader, Sparkles, Play, ChevronDown } from 'lucide-react';
import { generateHeyGenVideo, pollHeyGenStatus, isHeyGenAvailable } from '../../lib/heygenService';
import { useToast } from '../../contexts/ToastContext';

interface VideoGeneratorProps {
  onClose: () => void;
  initialPrompt?: string;
}

type VideoModel = 'heygen';

const VIDEO_MODELS = [
  {
    id: 'heygen' as VideoModel,
    name: 'HeyGen AI Avatars',
    provider: 'HeyGen',
    description: 'Professional AI avatar videos',
    available: true,
  },
];

export const VideoGenerator: React.FC<VideoGeneratorProps> = ({ onClose, initialPrompt = '' }) => {
  const { showToast } = useToast();
  const [prompt, setPrompt] = useState(initialPrompt);
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedVideoUrl, setGeneratedVideoUrl] = useState<string | null>(null);
  const [progress, setProgress] = useState(0);
  const [selectedModel, setSelectedModel] = useState<VideoModel>('heygen');
  const [aspectRatio, setAspectRatio] = useState<'16:9' | '9:16' | '1:1'>('16:9');
  const [duration, setDuration] = useState<4 | 8>(4);
  const [showModelDropdown, setShowModelDropdown] = useState(false);
  const [hasAutoGenerated, setHasAutoGenerated] = useState(false);

  const heygenAvailable = isHeyGenAvailable();
  const selectedModelInfo = VIDEO_MODELS.find(m => m.id === selectedModel) || VIDEO_MODELS[0];

  useEffect(() => {
    if (initialPrompt && !hasAutoGenerated) {
      setPrompt(initialPrompt);
      setHasAutoGenerated(true);
      setTimeout(() => {
        handleGenerate(initialPrompt);
      }, 100);
    }
  }, [initialPrompt, hasAutoGenerated]);

  const handleGenerate = async (customPrompt?: string) => {
    const promptToUse = customPrompt || prompt.trim();

    if (!promptToUse) {
      showToast('warning', 'Enter a prompt', 'Please describe the video you want to create');
      return;
    }

    if (!heygenAvailable) {
      showToast('error', 'HeyGen Unavailable', 'HeyGen API is not configured');
      return;
    }

    if (isGenerating) {
      return;
    }

    console.log(`ðŸŽ¬ Starting video generation with ${selectedModel.toUpperCase()}:`, promptToUse);
    setIsGenerating(true);
    setProgress(0);
    setGeneratedVideoUrl(null);

    try {
      showToast('info', 'Starting Generation', 'Creating your AI avatar video with HeyGen...');
      setProgress(10);

      const aspectRatioMap: Record<string, '16:9' | '9:16' | '1:1'> = {
        '16:9': '16:9',
        '9:16': '9:16',
        '1:1': '1:1',
      };

      const result = await generateHeyGenVideo({
        script: promptToUse,
        aspectRatio: aspectRatioMap[aspectRatio] || '16:9',
      });

      setProgress(30);

      let attempts = 0;
      const maxAttempts = 120;

      while (attempts < maxAttempts) {
        await new Promise(resolve => setTimeout(resolve, 5000));

        const status = await pollHeyGenStatus(result.id);
        const progressPercent = 30 + (attempts / maxAttempts) * 60;
        setProgress(Math.min(progressPercent, 90));

        if (status.status === 'completed' && status.video_url) {
          setGeneratedVideoUrl(status.video_url);
          setProgress(100);
          showToast('success', 'Video Ready!', 'Your AI avatar video has been generated successfully');
          return;
        }

        if (status.status === 'failed') {
          throw new Error(status.error || 'Video generation failed');
        }

        attempts++;
      }

      throw new Error('Video generation timed out');
    } catch (error: any) {
      console.error('Video generation error:', error);
      showToast('error', 'Generation Failed', error?.message || 'Unable to generate video. Please try again.');
    } finally {
      setIsGenerating(false);
    }
  };

  const handleDownload = () => {
    if (!generatedVideoUrl) return;

    const link = document.createElement('a');
    link.href = generatedVideoUrl;
    link.download = `kroniq-video-${Date.now()}.mp4`;
    link.target = '_blank';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    showToast('success', 'Downloaded!', 'Video saved to your device');
  };

  return (
    <div className="fixed inset-0 flex items-center justify-center z-[100] animate-fade-in" style={{
      background: 'linear-gradient(135deg, rgba(15, 23, 42, 0.95) 0%, rgba(30, 41, 59, 0.95) 50%, rgba(15, 23, 42, 0.95) 100%)',
      backdropFilter: 'blur(20px)',
    }}>
      <div className="relative w-full max-w-4xl mx-auto px-6">
        <div className="relative bg-gradient-to-br from-slate-900/95 via-slate-800/95 to-slate-900/95 backdrop-blur-xl rounded-3xl border border-orange-500/20 shadow-2xl overflow-hidden">

          {/* Header */}
          <div className="relative bg-gradient-to-r from-orange-500/10 via-orange-600/10 to-orange-500/10 px-8 py-6 border-b border-orange-500/20">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-4">
                <div className="relative p-3 rounded-2xl bg-gradient-to-br from-orange-500 to-orange-600 shadow-lg">
                  <Video className="w-6 h-6 text-white" />
                </div>
                <div>
                  <h2 className="text-2xl font-bold text-white flex items-center gap-2">
                    AI Video Studio
                    <Sparkles className="w-5 h-5 text-orange-400 animate-pulse" />
                  </h2>
                  <p className="text-sm text-orange-300/80 mt-0.5">
                    Powered by {selectedModelInfo.provider}
                  </p>
                </div>
              </div>
              <button
                onClick={onClose}
                className="p-2.5 rounded-xl hover:bg-white/10 active:bg-white/20 text-white/60 hover:text-white transition-all duration-200"
              >
                <X className="w-5 h-5" />
              </button>
            </div>
          </div>

          <div className="p-8">
            <div className="grid lg:grid-cols-2 gap-8">

              {/* Left: Configuration */}
              <div className="space-y-6">

                {/* Model Selector */}
                <div className="space-y-3">
                  <label className="text-sm font-semibold text-white/90 flex items-center gap-2">
                    <Video className="w-4 h-4 text-orange-400" />
                    Video Model
                  </label>
                  <div className="relative">
                    <button
                      onClick={() => setShowModelDropdown(!showModelDropdown)}
                      disabled={isGenerating}
                      className="w-full px-4 py-3.5 bg-slate-800/50 border-2 border-slate-700/50 hover:border-orange-500/30 rounded-xl text-white text-left flex items-center justify-between transition-all disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      <div className="flex items-center gap-3">
                        <div className="flex items-center justify-center w-8 h-8 rounded-lg bg-orange-500/20">
                          <Video className="w-4 h-4 text-orange-400" />
                        </div>
                        <div>
                          <div className="text-sm font-semibold">{selectedModelInfo.name}</div>
                          <div className="text-xs text-white/50">{selectedModelInfo.description}</div>
                        </div>
                      </div>
                      <ChevronDown className={`w-5 h-5 text-white/50 transition-transform ${showModelDropdown ? 'rotate-180' : ''}`} />
                    </button>

                    {showModelDropdown && (
                      <div className="absolute top-full left-0 right-0 mt-2 bg-slate-800/95 backdrop-blur-xl border border-slate-700/50 rounded-xl shadow-2xl overflow-hidden z-50">
                        {VIDEO_MODELS.map((model) => (
                          <button
                            key={model.id}
                            onClick={() => {
                              setSelectedModel(model.id);
                              setShowModelDropdown(false);
                            }}
                            disabled={!model.available}
                            className={`w-full px-4 py-3 flex items-center gap-3 hover:bg-orange-500/10 transition-all disabled:opacity-50 disabled:cursor-not-allowed ${
                              selectedModel === model.id ? 'bg-orange-500/20' : ''
                            }`}
                          >
                            <div className="flex items-center justify-center w-8 h-8 rounded-lg bg-orange-500/20">
                              <Video className="w-4 h-4 text-orange-400" />
                            </div>
                            <div className="flex-1 text-left">
                              <div className="text-sm font-semibold text-white">{model.name}</div>
                              <div className="text-xs text-white/50">{model.description}</div>
                            </div>
                            {selectedModel === model.id && (
                              <div className="w-2 h-2 rounded-full bg-orange-400" />
                            )}
                          </button>
                        ))}
                      </div>
                    )}
                  </div>
                </div>

                {/* Prompt */}
                <div className="space-y-3">
                  <label className="text-sm font-semibold text-white/90 flex items-center gap-2">
                    <Sparkles className="w-4 h-4 text-orange-400" />
                    Video Script
                  </label>
                  <div className="relative">
                    <textarea
                      value={prompt}
                      onChange={(e) => setPrompt(e.target.value)}
                      placeholder="Enter your script... e.g., 'Welcome to our AI-powered video studio!'"
                      className="w-full h-40 px-4 py-3 bg-slate-800/50 border-2 border-slate-700/50 focus:border-orange-500/50 rounded-xl text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-orange-500/20 resize-none transition-all text-sm"
                      disabled={isGenerating}
                    />
                    <div className="absolute bottom-3 right-3 text-xs text-white/40">
                      {prompt.length} / 500
                    </div>
                  </div>
                </div>

                {/* Options */}
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <label className="text-sm font-semibold text-white/90">Aspect Ratio</label>
                    <select
                      value={aspectRatio}
                      onChange={(e) => setAspectRatio(e.target.value as any)}
                      disabled={isGenerating}
                      className="w-full px-4 py-2.5 bg-slate-800/50 border-2 border-slate-700/50 focus:border-orange-500/50 rounded-xl text-white text-sm focus:outline-none focus:ring-2 focus:ring-orange-500/20 transition-all disabled:opacity-50"
                    >
                      <option value="16:9">16:9 Landscape</option>
                      <option value="9:16">9:16 Portrait</option>
                      <option value="1:1">1:1 Square</option>
                    </select>
                  </div>

                  <div className="space-y-2">
                    <label className="text-sm font-semibold text-white/90">Duration</label>
                    <select
                      value={duration}
                      onChange={(e) => setDuration(Number(e.target.value) as any)}
                      disabled={isGenerating}
                      className="w-full px-4 py-2.5 bg-slate-800/50 border-2 border-slate-700/50 focus:border-orange-500/50 rounded-xl text-white text-sm focus:outline-none focus:ring-2 focus:ring-orange-500/20 transition-all disabled:opacity-50"
                    >
                      <option value={4}>4 seconds</option>
                      <option value={8}>8 seconds</option>
                    </select>
                  </div>
                </div>

                {/* Generate Button */}
                <button
                  onClick={() => handleGenerate()}
                  disabled={isGenerating || !prompt.trim() || !heygenAvailable}
                  className="w-full px-6 py-4 bg-gradient-to-r from-orange-500 to-orange-600 hover:from-orange-600 hover:to-orange-700 disabled:from-gray-600 disabled:to-gray-700 text-white font-semibold rounded-xl shadow-lg hover:shadow-orange-500/50 transition-all duration-200 flex items-center justify-center gap-3 disabled:opacity-50 disabled:cursor-not-allowed disabled:shadow-none"
                >
                  {isGenerating ? (
                    <>
                      <Loader className="w-5 h-5 animate-spin" />
                      Generating... {progress}%
                    </>
                  ) : (
                    <>
                      <Sparkles className="w-5 h-5" />
                      Generate Video
                    </>
                  )}
                </button>

              </div>

              {/* Right: Preview */}
              <div className="flex flex-col items-center justify-center bg-slate-900/50 rounded-2xl border-2 border-slate-700/50 p-8 min-h-[500px]">
                {generatedVideoUrl ? (
                  <div className="w-full space-y-4">
                    <div className="relative rounded-xl overflow-hidden shadow-2xl bg-black">
                      <video
                        src={generatedVideoUrl}
                        controls
                        className="w-full h-auto"
                        autoPlay
                      />
                    </div>
                    <div className="flex items-center gap-3">
                      <button
                        onClick={handleDownload}
                        className="flex-1 px-4 py-3 bg-slate-800/50 hover:bg-slate-700/50 border border-slate-700/50 text-white rounded-xl transition-all flex items-center justify-center gap-2"
                      >
                        <Download className="w-4 h-4" />
                        Download
                      </button>
                      <button
                        onClick={() => setGeneratedVideoUrl(null)}
                        className="px-4 py-3 bg-slate-800/50 hover:bg-slate-700/50 border border-slate-700/50 text-white rounded-xl transition-all"
                      >
                        New Video
                      </button>
                    </div>
                  </div>
                ) : (
                  <div className="text-center space-y-4">
                    <div className="w-24 h-24 mx-auto rounded-2xl bg-gradient-to-br from-orange-500/20 to-orange-600/20 flex items-center justify-center">
                      {isGenerating ? (
                        <Loader className="w-12 h-12 text-orange-400 animate-spin" />
                      ) : (
                        <Play className="w-12 h-12 text-orange-400" />
                      )}
                    </div>
                    <div>
                      <h3 className="text-lg font-semibold text-white mb-2">Your Video Preview</h3>
                      <p className="text-sm text-white/50 max-w-xs mx-auto">
                        {isGenerating
                          ? `Generating your video... ${progress}%`
                          : 'Describe what you want to see and click Generate. Your AI-powered video will appear here.'
                        }
                      </p>
                    </div>
                    {isGenerating && (
                      <div className="w-full max-w-xs mx-auto">
                        <div className="h-2 bg-slate-700/50 rounded-full overflow-hidden">
                          <div
                            className="h-full bg-gradient-to-r from-orange-500 to-orange-600 transition-all duration-300"
                            style={{ width: `${progress}%` }}
                          />
                        </div>
                      </div>
                    )}
                  </div>
                )}
              </div>

            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

import React, { useState, useEffect } from 'react';
import { Video, Download, Wand2, X, Loader, Sparkles, Play, Clock, Maximize } from 'lucide-react';
import { generatePixverseVideo, pollPixverseStatus, isPixverseAvailable } from '../../lib/pixverseService';
import { generateVideo, pollVideoStatus } from '../../lib/runwayService';
import { generateVideoWithHF, isHFVideoAvailable } from '../../lib/hfVideoService';
import { useToast } from '../../contexts/ToastContext';

interface VideoGeneratorProps {
  onClose: () => void;
  initialPrompt?: string;
}

export const VideoGenerator: React.FC<VideoGeneratorProps> = ({ onClose, initialPrompt = '' }) => {
  const { showToast } = useToast();
  const [prompt, setPrompt] = useState(initialPrompt);
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedVideoUrl, setGeneratedVideoUrl] = useState<string | null>(null);
  const [progress, setProgress] = useState(0);
  const [duration, setDuration] = useState<number>(5);
  const [aspectRatio, setAspectRatio] = useState<'16:9' | '9:16' | '1:1'>('16:9');
  const [hasAutoGenerated, setHasAutoGenerated] = useState(false);

  useEffect(() => {
    if (initialPrompt && !hasAutoGenerated) {
      setPrompt(initialPrompt);
      setHasAutoGenerated(true);
      setTimeout(() => {
        handleGenerate(initialPrompt);
      }, 100);
    }
  }, [initialPrompt, hasAutoGenerated]);

  const handleGenerate = async (customPrompt?: string) => {
    const promptToUse = customPrompt || prompt.trim();

    if (!promptToUse) {
      showToast('warning', 'Enter a prompt', 'Please describe the video you want to create');
      return;
    }

    if (isGenerating) {
      console.log('ðŸš« Generation already in progress, ignoring duplicate request');
      return;
    }

    console.log('ðŸŽ¬ Starting video generation with prompt:', promptToUse);
    setIsGenerating(true);
    setProgress(0);
    setGeneratedVideoUrl(null);

    try {
      if (isPixverseAvailable()) {
        showToast('info', 'Starting Generation', 'Creating your video with Pixverse AI...');
        setProgress(10);

        const result = await generatePixverseVideo({
          prompt: promptToUse,
          aspect_ratio: aspectRatio,
          duration,
        });

        setProgress(30);

        let attempts = 0;
        const maxAttempts = 60;

        while (attempts < maxAttempts) {
          await new Promise(resolve => setTimeout(resolve, 3000));

          const status = await pollPixverseStatus(result.id);
          const progressPercent = 30 + (attempts / maxAttempts) * 60;
          setProgress(Math.min(progressPercent, 90));

          if (status.status === 'completed' && status.video_url) {
            setGeneratedVideoUrl(status.video_url);
            setProgress(100);
            showToast('success', 'Video Ready!', 'Your video has been generated successfully');
            return;
          }

          if (status.status === 'failed') {
            throw new Error(status.error || 'Video generation failed');
          }

          attempts++;
        }

        throw new Error('Video generation timed out');
      } else if (isHFVideoAvailable()) {
        showToast('info', 'Starting Generation', 'Creating your video with Hugging Face...');
        setProgress(10);

        const result = await generateVideoWithHF({
          prompt: promptToUse
        });

        setProgress(90);
        setGeneratedVideoUrl(result.videoUrl);
        setProgress(100);
        showToast('success', 'Video Ready!', 'Your video has been generated successfully');
      } else {
        showToast('info', 'Starting Generation', 'Creating your video with Runway ML...');

        const taskId = await generateVideo({
          prompt: promptToUse,
          duration,
          aspectRatio
        });

        const videoUrl = await pollVideoStatus(
          taskId,
          (currentProgress) => {
            setProgress(currentProgress);
          }
        );

        setGeneratedVideoUrl(videoUrl);
        setProgress(100);
        showToast('success', 'Video Ready!', 'Your video has been generated successfully');
      }
    } catch (error: any) {
      console.error('Video generation error:', error);
      showToast('error', 'Generation Failed', error.message || 'Unable to generate video. Please try again.');
      setIsGenerating(false);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleDownload = () => {
    if (!generatedVideoUrl) return;

    const link = document.createElement('a');
    link.href = generatedVideoUrl;
    link.download = `kosmio-video-${Date.now()}.mp4`;
    link.target = '_blank';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    showToast('success', 'Downloaded!', 'Video saved to your device');
  };

  return (
    <div className="fixed inset-0 bg-black/80 backdrop-blur-xl flex items-center justify-center z-[100] animate-fade-in">
      <div className="relative w-full max-w-7xl mx-auto px-4 py-6">
        <div className="relative bg-gradient-to-br from-slate-900/98 via-slate-800/98 to-slate-900/98 backdrop-blur-2xl rounded-3xl border-2 border-orange-500/30 shadow-2xl shadow-orange-500/20 overflow-hidden">

          {/* Animated glow effect */}
          <div className="absolute -inset-[2px] bg-gradient-to-r from-orange-500/20 via-red-500/20 to-orange-500/20 rounded-3xl blur-xl animate-pulse opacity-50" />

          {/* Header */}
          <div className="relative bg-gradient-to-r from-orange-600/10 via-red-600/10 to-orange-600/10 backdrop-blur-sm p-6 border-b border-orange-500/20">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-4">
                <div className="relative p-3 rounded-2xl bg-gradient-to-br from-orange-500 to-red-600 shadow-lg shadow-orange-500/30">
                  <Video className="w-7 h-7 text-white" />
                  <div className="absolute inset-0 bg-gradient-to-br from-white/20 to-transparent rounded-2xl" />
                </div>
                <div>
                  <h2 className="text-2xl font-bold text-white flex items-center gap-2">
                    AI Video Studio
                    <Sparkles className="w-5 h-5 text-orange-400 animate-pulse" />
                  </h2>
                  <p className="text-sm text-orange-300/80 mt-0.5">Powered by Pixverse AI</p>
                </div>
              </div>
              <button
                onClick={onClose}
                className="p-3 rounded-2xl hover:bg-white/10 active:bg-white/20 text-white/60 hover:text-white transition-all duration-200 hover:rotate-90"
              >
                <X className="w-6 h-6" />
              </button>
            </div>
          </div>

          {/* Content */}
          <div className="relative p-8">
            <div className="grid lg:grid-cols-2 gap-8">

              {/* Left Column - Controls */}
              <div className="space-y-6">

                {/* Prompt Input */}
                <div className="space-y-3">
                  <label className="text-sm font-semibold text-white/90 flex items-center gap-2">
                    <Sparkles className="w-4 h-4 text-orange-400" />
                    Video Description
                  </label>
                  <div className="relative">
                    <textarea
                      value={prompt}
                      onChange={(e) => setPrompt(e.target.value)}
                      placeholder="Describe your video... e.g., 'A monkey dancing in a tropical rainforest'"
                      className="w-full h-40 px-5 py-4 bg-white/5 border-2 border-white/10 focus:border-orange-400/60 rounded-2xl text-white placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-orange-500/20 resize-none transition-all text-base backdrop-blur-sm"
                      disabled={isGenerating}
                    />
                    <div className="absolute bottom-3 right-3 text-xs text-white/40">
                      {prompt.length} / 500
                    </div>
                  </div>
                </div>

                {/* Settings Grid */}
                <div className="grid grid-cols-2 gap-4">

                  {/* Duration */}
                  <div className="space-y-2">
                    <label className="text-sm font-semibold text-white/90 flex items-center gap-2">
                      <Clock className="w-4 h-4 text-cyan-400" />
                      Duration
                    </label>
                    <div className="relative">
                      <select
                        value={duration}
                        onChange={(e) => setDuration(Number(e.target.value))}
                        disabled={isGenerating}
                        className="w-full px-4 py-3 bg-white/5 border-2 border-white/10 focus:border-cyan-400/60 rounded-xl text-white focus:outline-none focus:ring-2 focus:ring-cyan-500/20 transition-all appearance-none cursor-pointer disabled:opacity-50 disabled:cursor-not-allowed"
                      >
                        <option value={5}>5 seconds</option>
                        <option value={10}>10 seconds</option>
                      </select>
                      <div className="absolute right-4 top-1/2 -translate-y-1/2 pointer-events-none">
                        <svg className="w-4 h-4 text-white/60" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                        </svg>
                      </div>
                    </div>
                  </div>

                  {/* Aspect Ratio */}
                  <div className="space-y-2">
                    <label className="text-sm font-semibold text-white/90 flex items-center gap-2">
                      <Maximize className="w-4 h-4 text-blue-400" />
                      Aspect Ratio
                    </label>
                    <div className="relative">
                      <select
                        value={aspectRatio}
                        onChange={(e) => setAspectRatio(e.target.value as any)}
                        disabled={isGenerating}
                        className="w-full px-4 py-3 bg-white/5 border-2 border-white/10 focus:border-blue-400/60 rounded-xl text-white focus:outline-none focus:ring-2 focus:ring-blue-500/20 transition-all appearance-none cursor-pointer disabled:opacity-50 disabled:cursor-not-allowed"
                      >
                        <option value="16:9">16:9 Landscape</option>
                        <option value="9:16">9:16 Portrait</option>
                        <option value="1:1">1:1 Square</option>
                      </select>
                      <div className="absolute right-4 top-1/2 -translate-y-1/2 pointer-events-none">
                        <svg className="w-4 h-4 text-white/60" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                        </svg>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Action Button */}
                <button
                  onClick={() => handleGenerate()}
                  disabled={isGenerating || !prompt.trim()}
                  className="w-full flex items-center justify-center gap-3 px-6 py-4 bg-gradient-to-r from-orange-500 via-red-500 to-orange-600 hover:from-orange-600 hover:via-red-600 hover:to-orange-700 disabled:from-gray-700 disabled:to-gray-800 text-white font-semibold rounded-2xl transition-all disabled:opacity-40 disabled:cursor-not-allowed shadow-lg shadow-orange-500/30 hover:shadow-xl hover:shadow-orange-500/50 active:scale-[0.98] text-lg relative overflow-hidden group"
                >
                  <div className="absolute inset-0 bg-gradient-to-r from-white/0 via-white/20 to-white/0 translate-x-[-100%] group-hover:translate-x-[100%] transition-transform duration-700" />
                  {isGenerating ? (
                    <>
                      <Loader className="w-6 h-6 animate-spin relative z-10" />
                      <span className="relative z-10">
                        Generating... {progress > 0 && `${Math.round(progress)}%`}
                      </span>
                    </>
                  ) : (
                    <>
                      <Wand2 className="w-6 h-6 relative z-10" />
                      <span className="relative z-10">Generate Video</span>
                    </>
                  )}
                </button>

                {/* Progress Bar */}
                {isGenerating && progress > 0 && (
                  <div className="space-y-2 animate-fade-in">
                    <div className="flex justify-between text-sm font-medium">
                      <span className="text-orange-300">Processing your video...</span>
                      <span className="text-orange-400">{Math.round(progress)}%</span>
                    </div>
                    <div className="w-full h-3 bg-white/10 rounded-full overflow-hidden backdrop-blur-sm border border-white/10">
                      <div
                        className="h-full bg-gradient-to-r from-orange-500 via-red-500 to-orange-500 transition-all duration-500 relative overflow-hidden"
                        style={{ width: `${progress}%` }}
                      >
                        <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent animate-shimmer" />
                      </div>
                    </div>
                    <p className="text-xs text-white/50 text-center">This usually takes 30-90 seconds</p>
                  </div>
                )}

              </div>

              {/* Right Column - Video Preview */}
              <div className="space-y-4">
                <div className="relative aspect-video bg-gradient-to-br from-slate-800/50 to-slate-900/80 rounded-2xl border-2 border-white/10 overflow-hidden group">

                  {/* Video Player */}
                  {generatedVideoUrl ? (
                    <>
                      <video
                        src={generatedVideoUrl}
                        controls
                        autoPlay
                        loop
                        className="w-full h-full object-contain bg-black/50"
                      />
                      <button
                        onClick={handleDownload}
                        className="absolute top-4 right-4 p-3 bg-black/80 hover:bg-orange-500 backdrop-blur-md text-white rounded-xl transition-all opacity-0 group-hover:opacity-100 hover:scale-110 active:scale-95 shadow-lg"
                      >
                        <Download className="w-5 h-5" />
                      </button>
                    </>
                  ) : isGenerating ? (
                    <div className="absolute inset-0 flex items-center justify-center">
                      <div className="text-center space-y-6">
                        <div className="relative inline-block">
                          <div className="w-20 h-20 border-4 border-orange-500/20 border-t-orange-500 rounded-full animate-spin" />
                          <Video className="w-8 h-8 text-orange-400 absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2" />
                        </div>
                        <div className="space-y-2">
                          <p className="text-white/90 font-semibold text-lg">Creating Your Video</p>
                          <p className="text-white/50 text-sm max-w-xs mx-auto">
                            The AI is generating your video. This may take up to a minute...
                          </p>
                        </div>
                      </div>
                    </div>
                  ) : (
                    <div className="absolute inset-0 flex items-center justify-center p-8">
                      <div className="text-center space-y-6">
                        <div className="inline-flex p-6 rounded-3xl bg-gradient-to-br from-orange-500/20 to-red-500/20 border border-orange-500/30">
                          <Play className="w-16 h-16 text-orange-400" />
                        </div>
                        <div className="space-y-3">
                          <p className="text-white/90 font-semibold text-xl">Your Video Preview</p>
                          <p className="text-white/50 text-sm max-w-sm mx-auto leading-relaxed">
                            Describe what you want to see and click Generate. Your AI-powered video will appear here.
                          </p>
                        </div>
                      </div>
                    </div>
                  )}
                </div>

                {/* Info Cards */}
                <div className="grid grid-cols-2 gap-3">
                  <div className="p-4 bg-white/5 border border-white/10 rounded-xl backdrop-blur-sm">
                    <div className="flex items-center gap-2 text-cyan-400 mb-1">
                      <Clock className="w-4 h-4" />
                      <span className="text-xs font-semibold">Duration</span>
                    </div>
                    <p className="text-white font-semibold">{duration} seconds</p>
                  </div>
                  <div className="p-4 bg-white/5 border border-white/10 rounded-xl backdrop-blur-sm">
                    <div className="flex items-center gap-2 text-blue-400 mb-1">
                      <Maximize className="w-4 h-4" />
                      <span className="text-xs font-semibold">Format</span>
                    </div>
                    <p className="text-white font-semibold">{aspectRatio}</p>
                  </div>
                </div>
              </div>

            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

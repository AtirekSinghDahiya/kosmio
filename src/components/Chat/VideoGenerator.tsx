import React, { useState, useEffect } from 'react';
import { Video, Download, Wand2, X, Loader, Sparkles, Play, Clock, Maximize, AlertCircle, Lock } from 'lucide-react';
import { generateFalSoraVideo, isFalSoraAvailable } from '../../lib/falSoraService';
import { generateVeo3Video, isVeo3Available } from '../../lib/veo3Service';
import { generateSora2Video, isSora2Available } from '../../lib/sora2Service';
import { generateVeo3VideoNew, isVeo3NewAvailable } from '../../lib/veo3ServiceNew';
import { useToast } from '../../contexts/ToastContext';
import { useAuth } from '../../hooks/useAuth';
import { saveVideoToProject } from '../../lib/contentSaveService';
import { DynamicTokenEstimator } from '../../lib/dynamicTokenEstimator';
import { getUserTier, canAccessModel } from '../../lib/tierAccessService';

interface VideoGeneratorProps {
  onClose: () => void;
  initialPrompt?: string;
}

type VideoProvider = 'sora' | 'veo3' | 'sora2-new' | 'veo3-new';

export const VideoGenerator: React.FC<VideoGeneratorProps> = ({ onClose, initialPrompt = '' }) => {
  const { showToast } = useToast();
  const { user } = useAuth();
  const [prompt, setPrompt] = useState(initialPrompt);
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedVideoUrl, setGeneratedVideoUrl] = useState<string | null>(null);
  const [progress, setProgress] = useState(0);
  const [progressStatus, setProgressStatus] = useState('');
  const [aspectRatio, setAspectRatio] = useState<'16:9' | '9:16' | '1:1'>('16:9');
  const [duration, setDuration] = useState<4 | 6 | 8>(8);
  const [hasAutoGenerated, setHasAutoGenerated] = useState(false);
  const [provider, setProvider] = useState<VideoProvider>('veo3-new');
  const [estimatedCost, setEstimatedCost] = useState<number>(0);
  const [userTier, setUserTier] = useState<'free' | 'paid' | 'loading'>('loading');
  const [canAccessVideoGen, setCanAccessVideoGen] = useState(false);

  const soraAvailable = isFalSoraAvailable();
  const veo3Available = isVeo3Available();
  const sora2NewAvailable = isSora2Available();
  const veo3NewAvailable = isVeo3NewAvailable();

  useEffect(() => {
    const checkAccess = async () => {
      if (user?.uid) {
        const tierInfo = await getUserTier(user.uid);
        const hasAccess = tierInfo.tier === 'paid';
        setUserTier(tierInfo.tier);
        setCanAccessVideoGen(hasAccess);
        console.log('ðŸŽ¬ VideoGenerator - User is paid:', hasAccess);
      } else {
        setUserTier('free');
        setCanAccessVideoGen(false);
      }
    };
    checkAccess();
  }, [user]);

  useEffect(() => {
    if (initialPrompt && !hasAutoGenerated) {
      setPrompt(initialPrompt);
      setHasAutoGenerated(true);
      setTimeout(() => {
        handleGenerate(initialPrompt);
      }, 100);
    }
  }, [initialPrompt, hasAutoGenerated]);

  useEffect(() => {
    if (prompt.trim()) {
      const tokens = DynamicTokenEstimator.estimateVideoCost(prompt, duration);
      setEstimatedCost(tokens);
    } else {
      setEstimatedCost(0);
    }
  }, [prompt, duration, provider]);

  const handleGenerateWithSora = async (promptToUse: string) => {
    showToast('info', 'Starting Generation', 'Creating your video with Sora 2...');

    const aspectRatioMap: Record<string, '16:9' | '9:16'> = {
      '16:9': '16:9',
      '9:16': '9:16',
      '1:1': '16:9',
    };

    const durationMap: Record<number, 4 | 8 | 12> = {
      4: 4,
      6: 8,
      8: 8,
    };

    const videoUrl = await generateFalSoraVideo(
      {
        prompt: promptToUse,
        resolution: '720p',
        aspect_ratio: aspectRatioMap[aspectRatio] || '16:9',
        duration: durationMap[duration] || 4,
      },
      (status, percent) => {
        console.log(`Progress: ${status} - ${percent}%`);
        setProgress(percent);
        setProgressStatus(status);
      }
    );

    setGeneratedVideoUrl(videoUrl);
    setProgress(100);
    showToast('success', 'Video Ready!', 'Your Sora 2 video has been generated successfully');

    if (user) {
      try {
        await saveVideoToProject(user.uid, promptToUse, videoUrl, {
          model: 'sora-2',
          duration: duration,
          provider: 'fal-ai'
        });
      } catch (saveError) {
        console.error('Failed to save video to project:', saveError);
      }
    }
  };

  const handleGenerateWithVeo3 = async (promptToUse: string) => {
    showToast('info', 'Starting Generation', 'Creating your video with Veo 3...');

    const durationMap: Record<number, '4s' | '6s' | '8s'> = {
      4: '4s',
      6: '6s',
      8: '8s',
    };

    const videoUrl = await generateVeo3Video(
      {
        prompt: promptToUse,
        aspect_ratio: aspectRatio,
        duration: durationMap[duration] || '8s',
        resolution: '720p',
        enhance_prompt: true,
        auto_fix: true,
        generate_audio: true,
      },
      (status, percent) => {
        console.log(`Progress: ${status} - ${percent}%`);
        setProgress(percent);
        setProgressStatus(status);
      }
    );

    setGeneratedVideoUrl(videoUrl);
    setProgress(100);
    showToast('success', 'Video Ready!', 'Your Veo 3 video has been generated successfully');

    if (user) {
      try {
        await saveVideoToProject(user.uid, promptToUse, videoUrl, {
          model: 'veo-3',
          duration: duration,
          provider: 'fal-ai'
        });
      } catch (saveError) {
        console.error('Failed to save video to project:', saveError);
      }
    }
  };

  const handleGenerateWithSora2New = async (promptToUse: string) => {
    showToast('info', 'Starting Generation', 'Creating your video with Sora 2...');

    const videoUrl = await generateSora2Video(
      {
        prompt: promptToUse,
        resolution: '720p',
        aspect_ratio: aspectRatio === '1:1' ? '16:9' : aspectRatio,
        duration: duration === 6 ? 8 : duration as 4 | 8 | 12,
      },
      (status, percent) => {
        setProgress(percent);
        setProgressStatus(status);
      }
    );

    setGeneratedVideoUrl(videoUrl);
    setProgress(100);
    showToast('success', 'Video Ready!', 'Your Sora 2 video has been generated successfully');

    if (user) {
      try {
        await saveVideoToProject(user.uid, promptToUse, videoUrl, {
          model: 'sora-2',
          duration: duration,
          provider: 'fal-ai'
        });
      } catch (saveError) {
        console.error('Failed to save video to project:', saveError);
      }
    }
  };

  const handleGenerateWithVeo3New = async (promptToUse: string) => {
    showToast('info', 'Starting Generation', 'Creating your video with Veo 3 Fast...');

    const durationMap: Record<number, '4s' | '6s' | '8s'> = {
      4: '4s',
      6: '6s',
      8: '8s',
    };

    const videoUrl = await generateVeo3VideoNew(
      {
        prompt: promptToUse,
        aspect_ratio: aspectRatio,
        duration: durationMap[duration] || '8s',
        resolution: '720p',
        enhance_prompt: true,
        auto_fix: true,
        generate_audio: true,
      },
      (status, percent) => {
        setProgress(percent);
        setProgressStatus(status);
      }
    );

    setGeneratedVideoUrl(videoUrl);
    setProgress(100);
    showToast('success', 'Video Ready!', 'Your Veo 3 Fast video has been generated successfully');

    if (user) {
      try {
        await saveVideoToProject(user.uid, promptToUse, videoUrl, {
          model: 'veo-3-fast',
          duration: duration,
          provider: 'fal-ai'
        });
      } catch (saveError) {
        console.error('Failed to save video to project:', saveError);
      }
    }
  };

  const handleGenerate = async (customPrompt?: string) => {
    const promptToUse = customPrompt || prompt.trim();

    if (!promptToUse) {
      showToast('warning', 'Enter a prompt', 'Please describe the video you want to create');
      return;
    }

    if (userTier === 'loading') {
      showToast('info', 'Checking Access', 'Please wait while we verify your tier status...');
      return;
    }

    if (!canAccessVideoGen) {
      showToast('error', 'Premium Feature', 'Video generation is only available for paid users. Please purchase tokens to access this feature.', 5000);
      return;
    }

    if ((provider === 'sora' || provider === 'sora2-new') && !soraAvailable && !sora2NewAvailable) {
      showToast('error', 'API Key Missing', 'Sora API key is not configured');
      return;
    }

    if ((provider === 'veo3' || provider === 'veo3-new') && !veo3Available && !veo3NewAvailable) {
      showToast('error', 'API Key Missing', 'Veo 3 API key is not configured');
      return;
    }

    if (isGenerating) {
      console.log('ðŸš« Generation already in progress, ignoring duplicate request');
      return;
    }

    console.log(`ðŸŽ¬ Starting video generation with ${provider.toUpperCase()}:`, promptToUse);
    setIsGenerating(true);
    setProgress(0);
    setProgressStatus('');
    setGeneratedVideoUrl(null);

    try {
      if (provider === 'sora') {
        await handleGenerateWithSora(promptToUse);
      } else if (provider === 'sora2-new') {
        await handleGenerateWithSora2New(promptToUse);
      } else if (provider === 'veo3-new') {
        await handleGenerateWithVeo3New(promptToUse);
      } else {
        await handleGenerateWithVeo3(promptToUse);
      }
    } catch (error: any) {
      console.error('Video generation error:', error);
      let errorMessage = error?.message || 'Unable to generate video. Please try again.';

      if (errorMessage.includes('verification') || errorMessage.includes('AIMLAPI')) {
        errorMessage = 'Service configuration error. Please contact support.';
      }

      showToast('error', 'Generation Failed', errorMessage);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleDownload = () => {
    if (!generatedVideoUrl) return;

    const link = document.createElement('a');
    link.href = generatedVideoUrl;
    link.download = `kroniq-${provider}-video-${Date.now()}.mp4`;
    link.target = '_blank';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    showToast('success', 'Downloaded!', 'Video saved to your device');
  };

  const getProviderDescription = () => {
    if (provider === 'sora' || provider === 'sora2-new') {
      return 'Powered by OpenAI Sora 2 via Fal.ai (Premium)';
    }
    return 'Powered by Google Veo 3 Fast via Fal.ai (Premium)';
  };

  return (
    <div className="fixed inset-0 bg-black/80 backdrop-blur-xl flex items-center justify-center z-[100] animate-fade-in p-2 md:p-4">
      <div className="relative w-full max-w-7xl mx-auto h-full md:h-auto overflow-y-auto">
        <div className="relative bg-gradient-to-br from-slate-800 via-slate-700 to-slate-800 backdrop-blur-2xl rounded-2xl md:rounded-3xl border-2 border-orange-500/30 shadow-2xl shadow-orange-500/20 overflow-hidden">

          <div className="absolute -inset-[2px] bg-gradient-to-r from-orange-500/20 via-red-500/20 to-orange-500/20 rounded-3xl blur-xl animate-pulse opacity-50" />

          <div className="relative bg-gradient-to-r from-orange-600/10 via-red-600/10 to-orange-600/10 backdrop-blur-sm p-6 border-b border-orange-500/20">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-4">
                <div className="relative p-3 rounded-2xl bg-gradient-to-br from-orange-500 to-red-600 shadow-lg shadow-orange-500/30">
                  <Video className="w-7 h-7 text-white" />
                  <div className="absolute inset-0 bg-gradient-to-br from-white/20 to-transparent rounded-2xl" />
                </div>
                <div>
                  <h2 className="text-2xl font-bold text-white flex items-center gap-2">
                    AI Video Studio
                    <Sparkles className="w-5 h-5 text-orange-400 animate-pulse" />
                  </h2>
                  <p className="text-sm text-orange-300/80 mt-0.5">
                    {getProviderDescription()}
                  </p>
                </div>
              </div>
              <button
                onClick={onClose}
                className="p-3 rounded-2xl hover:bg-white/10 active:bg-white/20 text-white/60 hover:text-white transition-all duration-200 hover:rotate-90"
              >
                <X className="w-6 h-6" />
              </button>
            </div>
          </div>

          <div className="relative p-4 md:p-8">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 md:gap-8">

              <div className="space-y-4 md:space-y-6">

                <div className="space-y-3">
                  <label className="text-sm font-semibold text-white/90 flex items-center gap-2">
                    <Video className="w-4 h-4 text-orange-400" />
                    Video Provider
                  </label>
                  <div className="grid grid-cols-2 gap-2 md:gap-3">
                    <button
                      onClick={() => setProvider('veo3-new')}
                      disabled={isGenerating || (!veo3NewAvailable && userTier === 'free')}
                      className={`px-4 py-3 rounded-xl font-medium transition-all disabled:opacity-50 disabled:cursor-not-allowed relative ${
                        provider === 'veo3-new'
                          ? 'bg-orange-500/20 border-2 border-orange-400/60 text-orange-300'
                          : 'bg-slate-700/50 border-2 border-white/20 text-white/60 hover:border-orange-400/30'
                      }`}
                    >
                      <div className="text-sm font-bold">Veo 3 Fast</div>
                      <div className="text-xs opacity-75">Google â€¢ Premium</div>
                      {!canAccessVideoGen && (
                        <div className="absolute -top-2 -right-2 bg-yellow-500 text-black text-xs px-2 py-0.5 rounded-full font-bold">
                          PAID
                        </div>
                      )}
                    </button>
                    <button
                      onClick={() => setProvider('sora2-new')}
                      disabled={isGenerating || (!sora2NewAvailable && userTier === 'free')}
                      className={`px-4 py-3 rounded-xl font-medium transition-all disabled:opacity-50 disabled:cursor-not-allowed relative ${
                        provider === 'sora2-new'
                          ? 'bg-orange-500/20 border-2 border-orange-400/60 text-orange-300'
                          : 'bg-slate-700/50 border-2 border-white/20 text-white/60 hover:border-orange-400/30'
                      }`}
                    >
                      <div className="text-sm font-bold">Sora 2</div>
                      <div className="text-xs opacity-75">OpenAI â€¢ Premium</div>
                      {!canAccessVideoGen && (
                        <div className="absolute -top-2 -right-2 bg-yellow-500 text-black text-xs px-2 py-0.5 rounded-full font-bold">
                          PAID
                        </div>
                      )}
                    </button>
                  </div>
                </div>

                {userTier === 'loading' && (
                  <div className="flex items-start gap-3 p-4 bg-blue-500/10 border border-blue-500/30 rounded-xl">
                    <Loader className="w-5 h-5 text-blue-400 flex-shrink-0 mt-0.5 animate-spin" />
                    <div className="text-sm text-blue-200">
                      <p className="font-semibold mb-1">Checking Access...</p>
                      <p className="text-blue-300/80">Verifying your subscription status...</p>
                    </div>
                  </div>
                )}

                {!canAccessVideoGen && userTier !== 'loading' && (
                  <div className="flex items-start gap-3 p-4 bg-yellow-500/10 border border-yellow-500/30 rounded-xl">
                    <AlertCircle className="w-5 h-5 text-yellow-400 flex-shrink-0 mt-0.5" />
                    <div className="text-sm text-yellow-200">
                      <p className="font-semibold mb-1">Premium Feature</p>
                      <p className="text-yellow-300/80">Video generation is only available for users who have purchased tokens. Please purchase a token pack to access this premium feature.</p>
                    </div>
                  </div>
                )}

                {!veo3Available && (
                  <div className="flex items-start gap-3 p-4 bg-red-500/10 border border-red-500/30 rounded-xl">
                    <AlertCircle className="w-5 h-5 text-red-400 flex-shrink-0 mt-0.5" />
                    <div className="text-sm text-red-200">
                      <p className="font-semibold mb-1">API Key Required</p>
                      <p className="text-red-300/80">Fal.ai API key is not configured. Please contact support.</p>
                    </div>
                  </div>
                )}

                <div className="space-y-3">
                  <label className="text-sm font-semibold text-white/90 flex items-center gap-2">
                    <Sparkles className="w-4 h-4 text-orange-400" />
                    Video Prompt
                  </label>
                  <div className="relative">
                    <textarea
                      value={prompt}
                      onChange={(e) => setPrompt(e.target.value)}
                      placeholder="Describe your video... e.g., 'A serene mountain landscape at sunrise with clouds rolling over peaks'"
                      className="w-full h-40 px-5 py-4 bg-slate-700/50 border-2 border-white/20 focus:border-orange-400/60 rounded-2xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-orange-500/20 resize-none transition-all text-base backdrop-blur-sm"
                      disabled={isGenerating}
                    />
                    <div className="absolute bottom-3 right-3 text-xs text-white/40">
                      {prompt.length} / 1000
                    </div>
                  </div>
                </div>

                <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 md:gap-4">
                  <div className="space-y-2">
                    <label className="text-sm font-semibold text-white/90 flex items-center gap-2">
                      <Maximize className="w-4 h-4 text-blue-400" />
                      Aspect Ratio
                    </label>
                    <div className="relative">
                      <select
                        value={aspectRatio}
                        onChange={(e) => setAspectRatio(e.target.value as any)}
                        disabled={isGenerating}
                        className="w-full px-4 py-3 bg-slate-700/50 border-2 border-white/20 focus:border-blue-400/60 rounded-xl text-white focus:outline-none focus:ring-2 focus:ring-blue-500/20 transition-all appearance-none cursor-pointer disabled:opacity-50 disabled:cursor-not-allowed"
                      >
                        <option value="16:9">16:9 Landscape</option>
                        <option value="9:16">9:16 Portrait</option>
                        {provider === 'veo3' && <option value="1:1">1:1 Square</option>}
                      </select>
                      <div className="absolute right-4 top-1/2 -translate-y-1/2 pointer-events-none">
                        <svg className="w-4 h-4 text-white/60" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                        </svg>
                      </div>
                    </div>
                  </div>

                  <div className="space-y-2">
                    <label className="text-sm font-semibold text-white/90 flex items-center gap-2">
                      <Clock className="w-4 h-4 text-cyan-400" />
                      Duration
                    </label>
                    <div className="relative">
                      <select
                        value={duration}
                        onChange={(e) => setDuration(Number(e.target.value) as any)}
                        disabled={isGenerating}
                        className="w-full px-4 py-3 bg-slate-700/50 border-2 border-white/20 focus:border-cyan-400/60 rounded-xl text-white focus:outline-none focus:ring-2 focus:ring-cyan-500/20 transition-all appearance-none cursor-pointer disabled:opacity-50 disabled:cursor-not-allowed"
                      >
                        <option value={4}>4 seconds</option>
                        {provider === 'veo3' && <option value={6}>6 seconds</option>}
                        <option value={8}>8 seconds</option>
                      </select>
                      <div className="absolute right-4 top-1/2 -translate-y-1/2 pointer-events-none">
                        <svg className="w-4 h-4 text-white/60" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                        </svg>
                      </div>
                    </div>
                  </div>
                </div>

                {estimatedCost > 0 && (
                  <div className="p-4 bg-blue-500/10 border border-blue-500/30 rounded-xl">
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-blue-200">Estimated Cost:</span>
                      <span className="text-lg font-bold text-blue-300">
                        {(estimatedCost / 1000000).toFixed(2)}M tokens
                      </span>
                    </div>
                  </div>
                )}

                <button
                  onClick={() => handleGenerate()}
                  disabled={isGenerating || !prompt.trim() || (provider === 'sora' && userTier === 'free')}
                  className="w-full flex items-center justify-center gap-3 px-6 py-4 bg-gradient-to-r from-orange-500 via-red-500 to-orange-600 hover:from-orange-600 hover:via-red-600 hover:to-orange-700 disabled:from-gray-700 disabled:to-gray-800 text-white font-semibold rounded-2xl transition-all disabled:opacity-40 disabled:cursor-not-allowed shadow-lg shadow-orange-500/30 hover:shadow-xl hover:shadow-orange-500/50 active:scale-[0.98] text-lg relative overflow-hidden group"
                >
                  <div className="absolute inset-0 bg-gradient-to-r from-white/0 via-white/20 to-white/0 translate-x-[-100%] group-hover:translate-x-[100%] transition-transform duration-700" />
                  {isGenerating ? (
                    <>
                      <Loader className="w-6 h-6 animate-spin relative z-10" />
                      <span className="relative z-10">
                        {progressStatus || 'Generating...'} {progress > 0 && `${Math.round(progress)}%`}
                      </span>
                    </>
                  ) : (
                    <>
                      <Wand2 className="w-6 h-6 relative z-10" />
                      <span className="relative z-10">Generate Video</span>
                    </>
                  )}
                </button>
              </div>

              <div className="space-y-4 md:space-y-6">
                <div className="relative aspect-video bg-gradient-to-br from-slate-800 to-slate-900 rounded-xl md:rounded-2xl border-2 border-white/10 overflow-hidden shadow-2xl">
                  {generatedVideoUrl ? (
                    <div className="relative w-full h-full group">
                      <video
                        src={generatedVideoUrl}
                        controls
                        autoPlay
                        loop
                        className="w-full h-full object-contain"
                      >
                        Your browser does not support the video tag.
                      </video>
                      <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none" />
                    </div>
                  ) : isGenerating ? (
                    <div className="absolute inset-0 flex flex-col items-center justify-center">
                      <div className="relative">
                        <Loader className="w-16 h-16 text-orange-400 animate-spin" />
                        <div className="absolute inset-0 bg-orange-400/20 blur-2xl animate-pulse" />
                      </div>
                      <p className="text-white/80 mt-6 text-lg font-medium">
                        {progressStatus || 'Generating your video...'}
                      </p>
                      <div className="w-64 h-2 bg-slate-700 rounded-full mt-4 overflow-hidden">
                        <div
                          className="h-full bg-gradient-to-r from-orange-500 to-red-600 transition-all duration-500 rounded-full"
                          style={{ width: `${progress}%` }}
                        />
                      </div>
                      <p className="text-white/50 text-sm mt-2">{Math.round(progress)}%</p>
                    </div>
                  ) : (
                    <div className="absolute inset-0 flex flex-col items-center justify-center">
                      <div className="relative p-6 rounded-full bg-gradient-to-br from-orange-500/20 to-red-600/20 mb-4">
                        <Play className="w-12 h-12 text-orange-400" />
                      </div>
                      <p className="text-white/60 text-center px-8">
                        Your generated video will appear here
                      </p>
                    </div>
                  )}
                </div>

                {generatedVideoUrl && (
                  <button
                    onClick={handleDownload}
                    className="w-full flex items-center justify-center gap-3 px-6 py-4 bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white font-semibold rounded-2xl transition-all shadow-lg shadow-green-500/30 hover:shadow-xl hover:shadow-green-500/50 active:scale-[0.98] text-lg"
                  >
                    <Download className="w-6 h-6" />
                    <span>Download Video</span>
                  </button>
                )}

                <div className="p-5 bg-slate-700/30 rounded-xl border border-white/10">
                  <h3 className="text-white font-semibold mb-3 flex items-center gap-2">
                    <Sparkles className="w-4 h-4 text-orange-400" />
                    Pro Tips
                  </h3>
                  <ul className="space-y-2 text-sm text-white/70">
                    <li className="flex items-start gap-2">
                      <span className="text-orange-400 mt-0.5">â€¢</span>
                      <span>Be descriptive: Include details about setting, action, style, and lighting</span>
                    </li>
                    <li className="flex items-start gap-2">
                      <span className="text-orange-400 mt-0.5">â€¢</span>
                      <span>Sora 2 offers premium quality for complex scenes (paid users only)</span>
                    </li>
                    <li className="flex items-start gap-2">
                      <span className="text-orange-400 mt-0.5">â€¢</span>
                      <span>Veo 3 Fast is great for quick, high-quality videos (free for all)</span>
                    </li>
                    <li className="flex items-start gap-2">
                      <span className="text-orange-400 mt-0.5">â€¢</span>
                      <span>Longer durations cost more tokens but provide better storytelling</span>
                    </li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};
